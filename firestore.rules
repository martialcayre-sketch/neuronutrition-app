// Allow only authenticated; self-scope; admins via custom claims.
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isAdmin() { return isSignedIn() && request.auth.token.admin == true; }
    function isOwner(ownerUid) { return isSignedIn() && request.auth.uid == ownerUid; }

    match /users/{uid} {
      allow read, update: if isOwner(uid) || isAdmin();
      allow create: if isSignedIn();
      allow delete: if isAdmin();
    }

    // Per-collection access rules (cannot use alternation in a match path)
    match /profiles/{id} {
      allow read, write: if isOwner(resource.data.ownerUid) || isAdmin();
      allow create: if isSignedIn();
    }
    match /intakes/{id} {
      allow read, write: if isOwner(resource.data.ownerUid) || isAdmin();
      allow create: if isSignedIn();
    }
    match /patients/{id} {
      allow read: if isSignedIn() && (isAdmin() || resource.data.practitionerId == request.auth.uid);
      allow create: if isSignedIn() && (isAdmin() || request.resource.data.practitionerId == request.auth.uid);
      allow update: if isSignedIn() && (isAdmin() || request.resource.data.practitionerId == request.auth.uid);
      allow delete: if isAdmin();
    }
    match /practitioners/{id} {
      allow read: if isSignedIn() && (request.auth.uid == id || isAdmin());
      allow create, update, delete: if isAdmin();
    }
    match /plans/{id} {
      allow read, write: if isOwner(resource.data.ownerUid) || isAdmin();
      allow create: if isSignedIn();
    }
    match /sessions/{id} {
      allow read, write: if isOwner(resource.data.ownerUid) || isAdmin();
      allow create: if isSignedIn();
    }
    match /metrics/{id} {
      allow read, write: if isOwner(resource.data.ownerUid) || isAdmin();
      allow create: if isSignedIn();
    }

    // Public patient links
    match /formLinks/{token} {
      // Allow read of the link document (contains only metadata and questionnaireId)
      allow read: if true;
      // Creation/update of links should be done by server/admin only
      allow write: if false;

      // Anonymous patient responses under a link
      match /responses/{rid} {
        // Allow anonymous creation if the parent link exists
        allow create: if request.auth == null && exists(/databases/$(database)/documents/formLinks/$(token));
        allow read, update, delete: if false;
      }
    }
  }
}
